// Generated by CoffeeScript 1.8.0
var FileRevision, crypto, fs, glob, path;

crypto = require('crypto');

fs = require('fs');

glob = require('glob');

path = require('path');

FileRevision = (function() {
  function FileRevision(userProvidedConfig) {
    this.loadConfig(userProvidedConfig);
  }

  FileRevision.prototype.createFileRevisions = function() {
    return this._generateRevisionFiles();
  };

  FileRevision.prototype.loadConfig = function(userProvidedConfig) {
    var key, value;
    this.config = {
      algorithm: 'md5',
      inputEncoding: 'utf8',
      outputEncoding: 'hex',
      manifestPath: null,
      inputPath: './**',
      matchPattern: null,
      retainOriginal: false,
      revisionStyle: 'queryString'
    };
    for (key in userProvidedConfig) {
      value = userProvidedConfig[key];
      this.config[key] = value;
    }
    return this.config;
  };

  FileRevision.prototype._generateRevisionFiles = function() {
    var eligibleFiles, manifest, newFileName, originalFileName, _results;
    eligibleFiles = this._eligibleFiles();
    manifest = this._generateManifest(eligibleFiles);
    _results = [];
    for (originalFileName in manifest) {
      newFileName = manifest[originalFileName];
      if (this.config.retainOriginal === true) {
        _results.push(this._copyFile(originalFileName, newFileName, this._raiseError));
      } else {
        _results.push(this._renameFile(originalFileName, newFileName, this._raiseError));
      }
    }
    return _results;
  };

  FileRevision.prototype._renameFile = function(originalFileName, newFileName, callback) {
    return fs.rename(originalFileName, newFileName, this._raiseError);
  };

  FileRevision.prototype._copyFile = function(originalFileName, newFileName, callback) {
    var callbackCalled, copyDone, source, target;
    callbackCalled = false;
    copyDone = function(error) {
      if (!callbackCalled) {
        callback(error);
        return callbackCalled = true;
      }
    };
    source = fs.createReadStream(originalFileName);
    source.on("error", copyDone);
    target = fs.createWriteStream(newFileName);
    target.on("error", copyDone);
    target.on("close", function(ex) {
      return copyDone();
    });
    return source.pipe(target);
  };

  FileRevision.prototype._availableFiles = function() {
    var availableFiles, filename, _i, _len, _ref;
    availableFiles = [];
    _ref = glob.sync(this.config.inputPath);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      filename = _ref[_i];
      if (fs.statSync(filename).isFile()) {
        availableFiles.push(filename);
      }
    }
    return availableFiles;
  };

  FileRevision.prototype._eligibleFiles = function() {
    var eligibleFiles, file, fileName, _i, _len, _ref;
    eligibleFiles = [];
    _ref = this._availableFiles();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      file = _ref[_i];
      fileName = path.basename(file);
      if (this._matchesPattern(fileName, this.config.matchPattern) && !this._isDigestFile(fileName)) {
        eligibleFiles.push(file);
      }
    }
    return eligibleFiles;
  };

  FileRevision.prototype._matchesPattern = function(stringForTest, pattern) {
    if (pattern == null) {
      return true;
    }
    return pattern.test(stringForTest);
  };

  FileRevision.prototype._isDigestFile = function(fileName) {
    switch (this.config.revisionStyle) {
      case 'queryString':
        return /\?revision=[a-fA-F0-9]{10}$/.test(fileName);
      default:
        return /-[a-fA-F0-9]{10}$/.test(path.basename(fileName, path.extname(fileName)));
    }
  };

  FileRevision.prototype._generateManifest = function(filesForDigest) {
    var manifest;
    manifest = this._fileDigestMap(filesForDigest);
    if (this.config.manifestPath != null) {
      fs.writeFile(this.config.manifestPath, JSON.stringify(manifest), this._raiseError);
    }
    return manifest;
  };

  FileRevision.prototype._fileDigestMap = function(filesForDigest) {
    var file, fileDigestMap, _i, _len;
    fileDigestMap = {};
    for (_i = 0, _len = filesForDigest.length; _i < _len; _i++) {
      file = filesForDigest[_i];
      fileDigestMap[file] = this._addDigestToFileName(file, this._digestForFile(file));
    }
    return fileDigestMap;
  };

  FileRevision.prototype._addDigestToFileName = function(file, digest) {
    var fileExtension, newFileName;
    newFileName = file;
    switch (this.config.revisionStyle) {
      case 'queryString':
        newFileName += "?revision=" + digest;
        break;
      default:
        fileExtension = path.extname(file);
        newFileName = "" + (path.basename(file, fileExtension)) + "-" + digest + fileExtension;
        newFileName = path.join(path.dirname(file), newFileName);
    }
    return newFileName;
  };

  FileRevision.prototype._digestForFile = function(file) {
    return this._checksum(fs.readFileSync(file).toString()).slice(0, 10);
  };

  FileRevision.prototype._checksum = function(str) {
    return crypto.createHash(this.config.algorithm).update(str, this.config.inputEncoding).digest(this.config.outputEncoding);
  };

  FileRevision.prototype._raiseError = function(error) {
    if (error != null) {
      return console.error(error);
    }
  };

  return FileRevision;

})();

module.exports = FileRevision;
